Day1 session:
=============
Why java?
WORA - Write Once Run Anywhere
     - PlatformInDependency ( .class/Byte code)

IDE - netBeans, eclipse, IJ

How much do I need JAVA for test automation?

Step 1:
Set up the enviroment: 
    Install Java and Eclipse

Eclipse: 
   Explain about the editor, console.
   Create a Maven project, Package, class
   Groupid : 
   Artifact id : 

Naming conventions for class:(Pascal case)
          - Pascal Case (PascalCase): In this the first letter of every word is in capital letter.
   	   Create a small java program 
          Explain main method 
                public : To call by JVM from anywhere we declare as public.
                static : without existing object also JVM has to call this method so declared as static.
                void : main method wont return anything to JVM hence declared as void.
                main() : name of the method
                (String [ ] args) :   These are command line arguments used to receive input from use

  	   Compile - Shortcuts cntrl F11 or RunAs--> java Application --> green button
   	   Show the class file ( Byte code- OS independant)
    Explain the platform dependency:  

To view the Project folder in the system explorer:
--------------------------------------------------
   click on Project --> Properties --> show in System Explorer
********************************************

keywords
datatypes
variables
  - Declaration
  - Intialisation
Naming convention standards:
           Camel Case (camelCase): 
In this standard, the first letter of the word always in small letter 
    and after that each word starts with a capital letter.

=================================================
 CONTROL STATEMENTS:

Conditional Statements - IF, IF-ELSE
Iterative/Looping statement - for, while,


Jumping statements -  
sum of digits:
int number = 345;

3 + 4 + 5 = 12

// frame a generic condition
whenever the quotinet becomes 0, stop executing

while (quotient not equalto  0){

Logic:

345/10 --> quotient = 34 (int)
       --> remainder = 5 ( store)


34/10 --> quotient = 3
      --> remainder = 4 ( store)

3/10  --> quotient = 0
      --> remainder = 3  ( store)
         3%10  ( num < den) --> num is returned as remainder

}

*******************************************************

Day2:
-----
JUMPING STATEMENTS:
#1 : break
The break keyword is used to break out a for loop, a while loop or a switch block.
pgm 1 : 
print all the numbers as in the for loop. ( 1 to 10)
But quit the loop when the value is 5
		for (int i = 0; i < 7; i++) {
			if(i==5) {
			   break;
			}
		//	System.out.println(i);
		}

#2 : continue
The continue keyword is used to end the current iteration in a for loop (or a while loop), 
and continues to the next iteration
pgm 2: Print only odd numbers // Skip all the even numbers

		// print all odd numbers alone from 1 to 15
		// skip all the even  numbers
		
		for (int i = 0; i <= 15; i++) {
			if(i%2 == 0) {
				continue;
			}
			System.out.println(i);
		}

#3 : return
Takes the control out of the method.

		for (int i = 0; i < 10; i++) {
			System.out.println(i);
			
			if(!value) {
				return;
			}
		}

******************************************************

CLASSES AND OBJECTS:
-------------------

Class : Blueprint for the object. 
        IT is from this the objects are created/replicated

Object: An entity that has both state and behavior.
        It is an instance of the class

variables / properties:
----------------------

Instance variables:
Local variables:

methods/actions:
----------------
  Access specifiers:
Who can access this ? or The extent upto which it can be accessed
To set access levels for classes, variables, methods, and constructors

ClassRoom:
==========
- Create package name as week1.day2
- Create a  new class as "MyMobile" under week2.day1
- Create 2 public methods (makeCall() , sendMsg()) with simple print statement
- Create a private method payBills() with simple print statement

- Create main method
- Create object for Mobile class and call the methods using the object
- Execute the class and get the result in console

- Create a new class as MyKid in week2.day1 package
- Create an object for the previous class "MyMobile"
- Try to access all the 3 methods of class "MyMobile"
- Observe the access level of all the methods.( See if all the methods are called)



Methods with return values and arguments:
-----------------------------------------

ARRAYS:
 - Arrays are used to store multiple values in a single variable
 - Collection of similar type of elements which has contiguous memory location- 
 - We can store only a fixed number of elements in a Java array.
 - It doesn't grow its size at runtime.

# Syntax:
  dataType[] <variableName> = value

# How do I Access the each Element of an Array?
  -- By referring the index number

  Array indexes start with 0: [0] --> refers the first element

# To find the number of elements in an array
        Length of the array: array.length;
           length is a property
# Finding the first and the last elements: 

# How to access multiple elements at a time from array?
  - for
  - for each
 
# sorting the array:

# Exception :


Classroom:
Find the second largest number:
Find the second smallest number:

https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/arrays/MissingElementInAnArray.java

int[] arr = {1,2,3,4,7,6,8};


Find the duplicates in 2 arrays:

******************************************************************
STRINGS:
=======
A String in Java is actually an object
It contain methods that can perform certain operations on strings

String Length:

Find a character in a String:

Get the position of a character in the string:

Get the last position of a character in the string:

Convert a string to a character array:

Convert a string to words:


********************************

Get a part of the string:

Replace a character:

Replace all the integers, non integers:
str.replaceAll("[\\d]", ""); - non integers
str.replaceAll("[\\D]", ""); - integers

Compare two strngs:
.equals 
*****************************

ASSIGNMENTS:
==========
Assignment #1:
===========
--  Create a class "Calculator" with below methods
	(a) add(int num1, int num2, int num3), it should return sum of num1+num2+num3
	(b) sub(int num1, int num2), it should return subtraction of of num1-num2
	(c) mul(double num1, double num2), it should return product of num1 * num2
	(d) divide(float num1, float num2), it should return division of num1 / num2

-- Create another class as MyCalculator and call all the methods from Calculator and print the results

Assignment #2: (Arrays)
=============
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/arrays/MissingElementInAnArray.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/FindIntersection.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/arrays/PrintDuplicatesInArray.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/arrays/FindSecondLargest.java


Assignment #3: (Strings)
=============

https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/Palindrome.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ChangeOddIndexToUpperCase.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/optional/Anagram.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/CharOccurance.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/FindTypes.java
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ReverseEvenWords.java



String Concatenation

1. Length() length of the string/count of chrs - 
2. charAt() 
3. indexOf() 
4. lastIndexOf()
5. toCharArray()
6. split()

*****************
( Yet to be done)
subString
7. replace
8. replace integers, non integers
str.replaceAll("[\\d]", ""); - non integers
str.replaceAll("[\\D]", ""); - integers
9. .equals
9. toLowerCase
10. toUpperCase 
11. startsWith()
12. endsWith()
**********************************

============================================================================================
week2 Day1: 
14-Aug-2021
==========

RoadMap of Todays class:
-----------------------
1. Selenium Introduction:
   - Open source project
   - Does only web automations
   - Any browsers can be automated
   - Desktop cannot be automated
   - Mobile apps cannot be automated
   - No API automation can be done but can call REST API calls


Features:
1. Supports multiple languages (Java, c#, Ruby, Python, Perl)
2. Supports multiple platforms( Windows, Linux, MAC....)
3. Supports multiple browsers ( Chrome, Firefox, Edge, Opera, Safari, IE)

2. Selenium Internal architecture:

Selenium Client Libraries : java, C#, Ruby, Perl
W3C protocol: World Wide Web Consortium
web Drivers ( Binary files - chromedriver.exe, firefox.exe,......)
Browsers    ( Chrome browser, Firrefox browser...)

3. How to set up your work environment?
	Open a Maven Project
	Update with the dependencies required in pom.xml
          (Project Object Model or POM is the fundamental unit of work in Maven)
	What is POM.xml?
		The POM is an XML document contains information about the project and various configuration detail 
	What are dependencies?
		Dependencies are external JAR files (Java libraries) that the project uses
        Maven dependendencies in your local repository --> .m2
	Force update in case pom.xml throws an error.
	

READY TO CODE!!!!
  *****Launch the browser*******

1. WebDriverManager ( importance of WebDriverManager)
2. Instantiate the driver:
    ChromeDriver driver = new ChromeDriver();
3. Launch the URL  
   driver.get() 
4. Get the title
   driver.getTitle()
5. Close the window 
   driver.close()
6. Maximise the window
   driver.manage.windows.maximize();

       **********  CLASS ROOM ***********

   ELEMENT LOCATION STRATEGIES
   ===========================

6. Locate the webElements:
   
Locators( 8 Locators):
1. Id         -  attribute / Use when id is unique (first preference) 
              -  Not use id: 
                  eg) id = ext-gen606 (Auto generated values)
                           ext-gen602
2. name        - Use this attribute, when a valid id is not present
               - Not use name when there are duplicates
3. classname   - Use this attribute, when a valid id/name is not present 
               - Not use this attribute : when spaces are there
               
4. linkText    - <a> anchor tags + text

5. Partial Link Text
6. Tagname
7. Xpath
8. CSS Selector


LEARN HTML:
***********
DOM: Document Object Model
HTML tags:
---------
<html>
<div>
<a>
<label>
<input>
<button>
<table>
<select>
<option>


Structure of HTML element:
=========================
1. Tag               : Tagname : purple text  / Mandatory   
2. Attributes        : Orange                 / Optional
3. Attribute values  : Blue text              / Optional
4. Text              : Black                  / Optional

Steps to locate a web element:
=============================

1. Find the web element

driver.findElement(By by):
  Find the first web element using the given method
  Returns the first matching element on the current context

  If no matching elements are found, 
     throws NoSuchElementException 

  1. driver - represents the browser
  2. Web element - represents a DOM node

(Note: implicitly wait)
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);

2. Perform the action on it:

   ********* Login Test case*******
url: http://leaftaps.com/opentaps
username: demosalesmanager
password: crmsfa


STEPS FOR LOGIN TEST CASE
*************************

// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it

// Step 9: Click CRM/SFA link


DROP DOWN: 

1. <select> tag
2. <option> - drop down elements

Step 1: Locate the web element 
        driver.findElement()

Step 2: Create an instance for the Select class 
         Pass the dropdown webelement as the argument

Step 3: Select the dropdown elements 

		WebElement drop3 = driver.findElement(By.id("dropdown3"));
		Select drpDwn3 = new Select(drop3);
		drpDwn3.selectByValue("4");

How to select a value in dropdown list?
-----------------------------------------
1. selectByVisibleText: selectByVisibleText(String arg0): void
2. selectByIndex: selectByIndex(int arg0) : void
3. selectByValue: selectByValue(String arg0) : void
4. getOptions().size()

Exception:
NoSuchValueException

ClassRooms for this week2-Day1 :
******************************
classroom#1 : Launch the URL
classroom#2 : Login testcase
classroom#3 : Create Lead Test case ( locate the elements, sendKeys(), clear())
classroom#4 : Drop down (First 4 options) 
              http://www.leafground.com/pages/Dropdown.html 
classroom#5 : Create Lead Test case ( dropdowns)

STEPS FOR CREATE LEAD TEST CASE
*******************************
// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Verify if the login process is successful
// Step 9: Click CRM/SFA link

// Step10: Click Leads tab 
// Step11: Click CreateLead
// Step12: Enter Company name
// Step13: Enter FirstName
// Step14: Enter LastName
// Step15: In Marketing Campaign drop down, use index to choose the "Car and driver" option
// Step16: In Industry drop down, use value to choose the "Health Care" option
// Step17: In Marketing Campaign drop down, use index to choose the "Car and driver" option
// Step18: In OwnerShip drop down, use VisibleText to choose the "Public Corporation" option
// Step19: Enter Country Code as 3 (First clear and then use sendKeys())	
// Step15: Click CreateLead button.
// Step16: Get the title of the landing page and verify it is in ViewPage

*******************************************************************
14.08.2021 - Week2 day1
ASSIGNMENTS:

CreateLead:
===========


FaceBook:
========
// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL https://en-gb.facebook.com/
// Step 4: Maximise the window
// Step 5: Add implicit wait
// Step 6: Click on Create New Account button
// Step 7: Enter the first name
// Step 8: Enter the last name
// Step 9: Enter the mobile number
// Step 10: Enterthe password
// Step 11: Handle all the three drop downs
// Step 12: Select the radio button "Female" 
            ( A normal click will do for this step) 


SalesForce:
// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL 
           https://www.salesforce.com/in/form/signup/freetrial-sales/?d=70130000000Enyk
// Step 4: Maximise the window
// Step 5: Add implicit wait
// Step 6: Fill in all the text boxes
// Step 7: Handle all the dropdowns
// Step 8: Click the check box
// Step 9: Close the browser
*Note: No need click Start my freeTrial

optional:
https://www.opencart.com/index.php?route=account/register


**********************************************************************
Summary:
Browser InterActions:
findElement(s)
maximize()
getTitle()
getCurrentUrl()
getPageSource()
close()
quit()


WebElement InterActions:
sendKeys( )
click()
clear()
getText()
getAttribute()

********************************************************************

21.08.2021
week3 day1

OOPS Concepts:
--------------
1. Inheritance
2. Polyorphism



3. Abstraction
4. Encapsulation
List and Set - collections


Topic: INHERITANCE
OOPS: Object Oriented Programming

Object, class

Inheritance in Java
-------------------

What is inheritance?

Inherit:
Father:
Son: 


Code redundant
too big

Increase the reusability of code - advantage

get the src attribute -- url

get(url)
404 ;
it is a broken image

title:
HTTP Status 404 – Not Found


Classroom 1:

Create 3 classes 
- Mobile (methods: sendMsg(),makeCall(),saveContact() 
- AndroidPhone (method: takeVideo)
- SmartPhone (method: connectWhatsApp)  


Note:
- AndroidPhone extends Mobile (Single Level Inheritance)
- SmartPhone extends AndroidPhone ( Multilevel Inheritance)


Execution class:
- Create a class named MyPhone for execution ( must have a main method)
- First, Create an object for AndroidPhone 
  Observe what all methods can be accessed ( Single Level Inheritance)
- Then, Create object for SmartPhone class 
   Observe if you can call all the methods using this object ( Multilevel Inheritance)



Inheritance in Selenium:
-----------------------
F3 : Open the declaration
F4 : hierarchy (parent class)

ChromiumDriver extends RemoteWebDriver			
ChromeDriver extends ChromiumDriver			
EdgeDriver extends ChromiumDriver			
SafariDriver extends RemoteWebDriver			
FireFoxDriver extends RemoteWebDriver			

POLYMORPHISM:
-------------
What is polymorphism?
poly : many
morph: forms

Types:
1. Method Overriding/runTime polymorphism
2. Method Overloading/Compile time polymorphism


*Method Overriding*
-------------------
- among diff classes
- between a parent class and a child class

length(),isEmpty() - String class


Classroom 2:

In the Classroom 1, 
 - Create the same method(takeVideo) in the SmartPhone class 
   ( This is the same as in AndroidPhone class) 
      *(Here you are overriding the parent method)*
 - Execute takeVideo() method using ChildClass object
 - Ensure from which class the takeVideo() is executed.


*Method Overloading*
--------------------
- Method signature differs

- method name is same:
    number of arguments differs
    Type of the argument differs
- same class

Selenium:

1. By.
2. sendKeys()
3. findElement()

Java:

print()
println()
replace
subString(start Index)
subString(start Index, end index)






Classroom 3:

Create class Calculator with below methods

- 2 methods for add,      1 method with 2 int args , 1 method with 3 int args
- 2 methods for multiply, 1 method with 2 int args, 1method with 1 int and 1 double args
- 2 methods for subtract, 1 method with 2 int args , 1 method with 2 double args
- 2 methods to divide ,   1 method with 2 int args, 1 method with one double number and one int

Create object for the Calculator class and execute all the methods

Homework: ( Explore yourself)
---------
- Try for private access secifier in inheritance
- Try for protected access secifier in inheritance
- Try to do (class level) Multiple inheritence( Not supported by Java)
- Give an example of Method overriding in Selenium

************************************************************************************

******************************************
22.08.2021
week3 day2

Agenda :
OOPS   : Abstraction
            - Interface
            - Abstract class

COLLECTIONS: List 
             Set

***************************
OOPS Concepts:
**************

Topic: ABSTRACTION
 Abstraction is a process of hiding the implementation details 
 Showing only functionality to the user.


The quality of dealing with ideas rather than events.
The user will have the information on what the object does instead of how it does 

-- Interface ( 100% of abstraction)
-- Abstract Class (0-100 % of abstraction )

What is Interface?
- design/Plan ()

Abstract class : class without a body / no implementation
Concrete class : class with a body / implementation

1. Added Unimplemented methods inside the Interface

2. Type the Documentation (use /** - Enter)

3. Use the Keyword : implements 

4. All the unimplemnted methods of an Interface has to be 
   implemented in the implementation class 
   (ie. the class that implements that Interface)

5. The implementation class can have its own method in it too.


6. Object instantiation cannot be done for an Interface.


7. CLASS LEVEL MULTIPLE INHERITANCE IS NOT POSSIBLE
   INTERFACE LEVEL MULTIPLE INHERITANCE IS POSSIBLE
     ( do it with TWO INTERFACES)

8. Inheritence - extends
   A class can inherit and also implement, both at a time.

9. Variables in Interface
 The variable in an interface is public, static, and final by default.
 public : accesses by any class
 final  : value cannot be changed
 static : No need of object to call the variable

If any variable in an interface is defined without public, static, and final keywords then, the compiler automatically adds the same.

Classroom 1:
===========
1.Design an Interface TaxCalculation with unimplemented methods below:
  Include documentations for each method
        void calcDeductions(String name, double HRA, double LTA)
	void calcGrossIncome(String name, double netIncome, double deductions)
	public int taxSlab()
	public double CalcTaxandPublishValue()

2. Design a second Interface IncomeCalculation with unimplemented method below:
       public double calcNetIncome(String name, double income1, double income2)

3. Implementation class: 
       CalcIndividualsTax, CalcBusinessTax  
       Implement TaxCalculation and IncomeCalculation interfaces
       Add its own method in this class( which is not in the interface)

4. Create a new class Execution class: ( with main method)
       Try to implement all the above learnings ( from point 1 to point 9) 


Abstract :
========
Abstract Class
Abstract classes may or may not contain abstract methods, 
i.e., methods without body ( public void get(); )

But, if a class has at least one abstract method, then the class must be declared abstract.

If a class is declared abstract, it cannot be instantiated.

To use an abstract class, you have to inherit it from another class, 
      provide implementations to the abstract methods in it.

If you inherit an abstract class, you have to provide implementations 
       to all the abstract methods in it.


Classroom2:
     AbstractClass     :University
     Methods           : pg()(implemented method),
                         ug() (unimplemented method)

     Class     : College extends University
     Methods   :ug()

*****************************
class      extends     class
class      implements     Interface
Interface  extends  Interface
*****************************

Selenium examples:
*******************
WebDriver - Interface
RemoteWebDriver implements WebDriver


COLLECTIONS
-----------
1. List - single dimensional
2. Set  - single dimensional
3. Map  - 2 dimensional

Array : cons
    dynamic growth of the array size is not possible

9000 bags on a day listed
array - to store 9000
 
12000 bags listed another day
Array cannot be used for this

List:
-----
1. Interface
2. cannot instantiate
3. Implmentation class : ArrayList
4. Maintains the insertion order
5. Can accept duplicates
6. syntax:


List<String> listName = new ArrayList<String>();
List<Integer> listName = new ArrayList<Integer>();

< > : Generics
Wrapper Class:
-------------
int     Integer
short   Short
boolean Boolean
char    Character
double  Double
String  String
byte    Byte
long    Long
float   Float

Use both for() and foreach()
// Find the size of the list
// To get an element from the list
// Insert an element into a list
// remove a value from the list


String arr[] = { "Aston Martin", "Bugatti", "Bentley", "Alfa Romeo", "Buick", "Acura", "Audi" };

// convert an array to list

// sorting a list
	// sorts in ascending order
// reverse the list


// Copy the elements from one list to another list


String arr[] = { "Aston Martin", "Bugatti", "Bentley", "Alfa Romeo", "Buick", "Acura", "Audi" };
String arr1[] = {  "Bugatti", "Bentley", "Alfa Romeo","Acura"};
// To retain the matched values
// Remove matched values data


LeafGrounds:

count the number of links in the page
count the options in drop down


SET:
1. Interface
2. cannot instantiate
3. Implmentation class : 
     HashSet       : Random order of the data
     LinkedHashSet : maintains the insertion Order
     TreeSet       : ASCII order ( sorted)
4. Maintains the insertion order
5. Cannot accept duplicates
6. syntax:
 Set<WrapperClass> setname = new HashSet<wrapperClass>();

*******

Week4 Day1: 28/08/2021
AGENDA:

1. Alerts
2. Frames
3. WindowHandling
4. TakeScreenShot

ALERTS:
-------
  web based dialog
  pop up or dialog 
  warning msg/ prompt/ Information

1. When an alert is currently active, the main page cannot be interacted.
2. We cannot inspect an Alert
3. Not seen in the DOM/  no locators as a normal webElement 
4. Done through the JavaScript
5. Cannot have multiple alerts at a time
6. We canno ttake a screen shot of an alert.

Types:
1. Modal dialog /Alert

   Types:
      1. Simple Alert       - Ok button - dismiss()/accept()
      2. Confirmation Alert - OK button and Cancel button
      3. Prompt Alert       - OK button and Cancel button, textbox

HANDLING THE ALERT:

   Alert - Interface
        Implementation class : RemoteAlert

  void dismiss();  Cancel
  void accept();   Ok button
  String getText(); To get text from alert
  void sendKeys(String keysToSend); To type in the text

-- Automaticaly switches the control to the current active dialog

   driver.switchTo().alert();

Step 1: switch the control to the current active dialog (SWITCH)
Step 2: Use the interface methods to handle the alert   (HANDLE)


ALERT EXCEPTIONS:
----------------
1)
// Throws org.openqa.selenium.NoAlertPresentException
      * If the dialog cannot be found
      * Occurs when trying to interact with the alert that is not active curently

2)
// org.openqa.selenium.UnhandledAlertException
       Occurs when Alert is still alive and	
       I try to access the main window
  
Classroom1 :
-----------
http://www.leafground.com/pages/Alert.html
 Try to handle frst three alerts in this page.
 For the Confirmation alert, verify of the OK/Cancel button is clicked

2. Non -Modal dialog/sweet alert:
      - Can be inspected
      - Can handle as a normal webElement

egs: IRCTC, tatcliq

      https://www.tatacliq.com/
      https://www.irctc.co.in/nget/train-search

***********************************

FRAMES:
-------

1. DOCUMENT INSIDE ANOTHER DOCUMENT (DOM inside a DOM)
2. <html> root tag for each frames

How does it appear in DOM?

1. <iframe> -- inline frame (floating frame)
2. <frame>  -- static frame/immovable

http://www.leafground.com/pages/frame.html

Main Document
<html>

     Frames:
      <html>

       Step 1: Switch into the frame
       Step 2: Locate the webelement

            BUTTON
   Come out of the frame

webElement in main page


Identify the frame :
  step1 : Switch :
          driver.switchTo().frame()
         (i) int - index
         (ii) String - id or name 
         (iii) WebElement - locator
          
 
Exception:
    
    NoSuchElementException
    NoFrameElementException

1. NoSuchElementException:
   - Wrong XPath/Locator
   - element is not loaded in DOM
   - when the element is inside a frame, and control is not inside the frame
 
Commands needed for frame:

driver.switchTo().frame(nestedFrame1);
driver.switchTo().defaultContent(); 
driver.switchTo().parentFrame();

RETURNING THE CONROL TO THE PREVIOUS LEVELS :
DefaultContent -- Frame2 control to main DOM  (Top of the DOM)
parentFrame    -- Frame2 to Frame1 ( One level higher - previous frame)

Frames:
ServiceNow:
Instance URL: https://dev113545.service-now.com/
Username: admin
Password: w6hnF2FRhwLC

****************************************************

WindowHandling:
--------------

Normal webElement:  8 locators
Frames           :  3 options
Windows          :  window handle

                    Window handle:(String):Unique
To switch the control to the desired window:
-------------------------------------------
driver.switchTo().window(windowHandle);

       getWindowHandle() - Current active (single) window
                         - return : String
       getWindowHandles() - Set of Strings


4 windows:
Set - get(2) 
1
2
3
4

List, Set - Collections:
   Set  - get a specific value based on index - NO
1. getWindowHandles()

     1. Set of strings
     2. Convert the Set to List 
     3. list.get(window) 

2. driver.switchTo().window(windowHandle);

Exceptions:
org.openqa.selenium.NoSuchWindowException

*************************************
ClassRoom:

Alerts and Window handling
---------------------------
1. Load https://www.irctc.co.in/
2. Click on OK button in the dialog  
3. Click on FLIGHTS link            
4. Go to the Flights tab
5. Print the customer care email id
6. Close the First tab(Train ticket booking) alone
*****************************


How can I handle browser notification?
--------------------------------------

ChromeOptions options = new ChromeOptions();
options.addArguments('--disable-notifications");
ChromeDriver driver = new ChromeDriver(options);

******************************
